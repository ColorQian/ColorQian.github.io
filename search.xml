<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数组刷题笔记</title>
      <link href="/posts/7dec.html"/>
      <url>/posts/7dec.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组的二分查找"><a href="#数组的二分查找" class="headerlink" title="数组的二分查找"></a>数组的二分查找</h1><ul><li><p>题目</p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">12</span>], target = <span class="number">9</span>     </span><br><span class="line">输出: <span class="number">4</span>       </span><br><span class="line">解释: <span class="number">9</span> 出现在 nums 中并且下标为 <span class="number">4</span>   </span><br></pre></td></tr></tbody></table></figure></li><li><p>代码实现</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearch</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二分查找</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> target)</span></span>{</span><br><span class="line">       <span class="comment">//先判断要查找的值是否在数组的范围内</span></span><br><span class="line">       <span class="keyword">if</span>(target &lt; nums[<span class="number">0</span>] || target &gt; nums[nums.length-<span class="number">1</span>]){</span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> right = nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (left &lt;= right){</span><br><span class="line">           <span class="keyword">int</span> middle = (left+right)/<span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span> (nums[middle] == target){</span><br><span class="line">               <span class="keyword">return</span> middle;</span><br><span class="line">           }<span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[middle]){ <span class="comment">//如果要查找的值在左边</span></span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">           }<span class="keyword">else</span> { <span class="comment">//如果要查找的值在右边</span></span><br><span class="line">               left = middle+<span class="number">1</span>;</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------main-------------</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        BinarySearch binarySearch = <span class="keyword">new</span> BinarySearch();</span><br><span class="line">        <span class="keyword">int</span>[] arr = {-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">12</span>};</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> res = binarySearch.binarySearch(arr,target);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="http://programmercarl.com/">代码随想录</a></p><hr><h1 id="移除数组中的元素"><a href="#移除数组中的元素" class="headerlink" title="移除数组中的元素"></a>移除数组中的元素</h1><p><a href="https://leetcode-cn.com/problems/remove-element/">leetcode题目链接</a></p><ul><li>题目</li></ul><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并<strong>原地</strong>修改输入数组。</p><p>元素的顺序可以改变，你不需要考虑数组中超出新长度后面的元素。</p><p>示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 </p><p>​            你不需要考虑数组中超出新长度后面的元素。</p><h2 id="方法一：暴力求解"><a href="#方法一：暴力求解" class="headerlink" title="方法一：暴力求解"></a>方法一：暴力求解</h2><ul><li><p>思路分析</p><p>这个题目暴力的解法就是两层for循环，一个for循环遍历数组元素 ，第二个for循环更新数组。</p></li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210811213009.gif"></p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveElement</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**暴力移除数组的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 输入的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 要移除的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回新的数组的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> size = arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">            <span class="comment">//如果找到要删除的值,就利用一个for循环,将下标i后面的值统统后移</span></span><br><span class="line">            <span class="keyword">if</span> (arr[i] == val){</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++) {</span><br><span class="line">                    arr[j-<span class="number">1</span>] = arr[j];</span><br><span class="line">                }</span><br><span class="line">                i--;  <span class="comment">// 因为此时i后面的值后移了，i位置上是新的值，所以i要减去1</span></span><br><span class="line">                      <span class="comment">//这样下一次循环时(i++)，i上的值相当于原先i位置上的下一个</span></span><br><span class="line">                size--;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------main------------</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        RemoveElement remove = <span class="keyword">new</span> RemoveElement();</span><br><span class="line">        <span class="keyword">int</span>[] arr = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>};</span><br><span class="line">        <span class="keyword">int</span> length = remove.removeElement(arr, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) {</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer题解之链表</title>
      <link href="/posts/ae99.html"/>
      <url>/posts/ae99.html</url>
      
        <content type="html"><![CDATA[<h1 id="返回链表中倒数最后k个结点"><a href="#返回链表中倒数最后k个结点" class="headerlink" title="返回链表中倒数最后k个结点"></a>返回链表中倒数最后k个结点</h1><p><a href="https://www.nowcoder.com/practice/886370fe658f41b498d40fb34ae76ff9?tpId=13&amp;&amp;tqId=11167&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking">牛客网-JZ14</a></p><ul><li>题目：输入一个链表，输出一个链表，该输出链表包含原链表中从倒数第k个结点至尾节点的全部节点。</li></ul><p>如果该链表长度小于k，请返回一个长度为 0 的链表。</p><ul><li>思路分析</li></ul><p>设链表的长度为 N。设置两个指针 P1 和 P2，先让 P1 移动 K 个节点，则还有 N - K 个节点可以移动。此时让 P1 和 P2 同时移动，可以知道当 P1 移动到链表结尾时，P2 移动到第 N - K +1个节点处，该位置就是倒数第 K 个节点。</p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210810124830.png"></p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Node节点类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Node{"</span> +</span><br><span class="line">                <span class="string">"val="</span> + val +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回链表中倒数最后k个结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：此题中链表的头节点即为第一个有效的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindKthToTail</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node head,Node node)</span></span>{</span><br><span class="line"></span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="keyword">null</span>){</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        cur.next = node;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(Node head)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>){</span><br><span class="line">            System.out.println(<span class="string">"链表为空！！！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">            System.out.printf(<span class="string">"节点编号：%d \n"</span>, cur.val);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**输入一个链表，输出一个链表，该输出链表包含原链表中从倒数第k个结点至尾节点的全部节点。</span></span><br><span class="line"><span class="comment">     * 如果该链表长度小于k，请返回一个长度为 0 的链表。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head 输入链表的头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k 倒数第k个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 倒数第k个结点至尾节点的全部节点 的 头节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">findKthToTail</span><span class="params">(Node head,<span class="keyword">int</span> k)</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Node p1 = head;</span><br><span class="line">        Node p2 = head;</span><br><span class="line">        <span class="keyword">while</span> (p1 != <span class="keyword">null</span> &amp;&amp; k &gt; <span class="number">0</span>){</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            k--;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (k &gt; <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (p1 != <span class="keyword">null</span>){</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p2;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---------------main-----------------</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        FindKthToTail list = <span class="keyword">new</span> FindKthToTail();</span><br><span class="line">        Node head = <span class="keyword">new</span> Node(<span class="number">1</span>);</span><br><span class="line">        list.add(head,<span class="keyword">new</span> Node(<span class="number">2</span>));</span><br><span class="line">        list.add(head,<span class="keyword">new</span> Node(<span class="number">3</span>));</span><br><span class="line">        list.add(head,<span class="keyword">new</span> Node(<span class="number">4</span>));</span><br><span class="line">        list.add(head,<span class="keyword">new</span> Node(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        list.list(head);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------findKthToTail---------"</span>);</span><br><span class="line">        Node newHead = list.findKthToTail(head, <span class="number">3</span>);</span><br><span class="line">        list.list(newHead);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="两个链表的第一个公共结点"><a href="#两个链表的第一个公共结点" class="headerlink" title="两个链表的第一个公共结点"></a>两个链表的第一个公共结点</h1><p><a href="https://www.nowcoder.com/practice/6ab1d9a29e88450685099d45c9e31e46?tpId=13&amp;&amp;tqId=11189&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking">牛客网-JZ36</a></p><ul><li>题目：输入两个无环的单链表，找出它们的第一个公共结点。</li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210810150024.png"></p><ul><li><p>解题思路</p><p>设 A 的长度为 a + c，B 的长度为 b + c，其中 c 为尾部公共部分长度，可知 a + c + b = b + c + a。</p><p>当访问链表 A 的指针访问到链表尾部时，令它从链表 B 的头部重新开始访问链表 B；同样地，当访问链表 B 的指针访问到链表尾部时，令它从链表 A 的头部重新开始访问链表 A。这样就能控制访问 A 和 B 两个链表的指针能同时访问到交点。</p></li></ul><ul><li>核心代码</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> </span>{</span><br><span class="line">    ListNode l1 = pHead1, l2 = pHead2;</span><br><span class="line">    <span class="keyword">while</span> (l1 != l2) {</span><br><span class="line">        l1 = (l1 == <span class="keyword">null</span>) ? pHead2 : l1.next;</span><br><span class="line">        l2 = (l2 == <span class="keyword">null</span>) ? pHead1 : l2.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> l1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>本题转载自：<a href="http://www.cyc2018.xyz/">CyC2018</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表刷题日记</title>
      <link href="/posts/3568.html"/>
      <url>/posts/3568.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-在单链表中删除倒数第K个节点"><a href="#1-在单链表中删除倒数第K个节点" class="headerlink" title="1.在单链表中删除倒数第K个节点"></a>1.在单链表中删除倒数第K个节点</h1><ul><li><p>题目</p><p>给定一个单链表，要求删除倒数第K个节点，并返回该节点</p></li></ul><br><ul><li>解答</li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210808163210.jpg"></p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210808163227.jpg"></p><br><br><ul><li><p>代码详情</p><p> Node节点类</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Node{"</span> +</span><br><span class="line">                <span class="string">"val="</span> + val +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><br><p>单链表类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span></span>{</span><br><span class="line"></span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="keyword">null</span>){</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        cur.next = node;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(<span class="string">"链表为空！！！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        Node cur = head.next;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">            System.out.printf(<span class="string">"节点编号：%d \n"</span>, cur.val);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**在单链表中删除倒数第k个节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastKth 倒数第k个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除的倒数第k个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">removeLastKthNode</span><span class="params">(<span class="keyword">int</span> lastKth)</span></span>{</span><br><span class="line">        Node cur = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span> || lastKth &lt; <span class="number">1</span>){</span><br><span class="line">            System.out.println(<span class="string">"链表为空或者参数输入有误！！！"</span>);</span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历链表，每移动一次，lathKth的值就减去1</span></span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="keyword">null</span>){</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            lastKth--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Node res = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lastKth &gt; <span class="number">0</span>){ <span class="comment">//lastKth的值大于链表的长度，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(lastKth == <span class="number">0</span>){ <span class="comment">// 此时，lastKth就是第一个节点</span></span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">this</span>.head.next;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.head;</span><br><span class="line">        }<span class="keyword">else</span> {   <span class="comment">//如果lastKth &lt; 0</span></span><br><span class="line">            cur = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">while</span> (lastKth != <span class="number">0</span>){</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                lastKth++;</span><br><span class="line">            }</span><br><span class="line">            res = cur.next; <span class="comment">//将要删除的节点赋值给res,用来返回</span></span><br><span class="line"></span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------------main-----------------</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SingleLinkedList linkedList = <span class="keyword">new</span> SingleLinkedList();</span><br><span class="line"></span><br><span class="line">        linkedList.add(<span class="keyword">new</span> Node(<span class="number">1</span>));</span><br><span class="line">        linkedList.add(<span class="keyword">new</span> Node(<span class="number">2</span>));</span><br><span class="line">        linkedList.add(<span class="keyword">new</span> Node(<span class="number">3</span>));</span><br><span class="line">        linkedList.add(<span class="keyword">new</span> Node(<span class="number">4</span>));</span><br><span class="line">        linkedList.add(<span class="keyword">new</span> Node(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        Node node = linkedList.removeLastKthNode(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        linkedList.list();</span><br><span class="line">        System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line">        System.out.println(node);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><br><h1 id="2-单链表的反转"><a href="#2-单链表的反转" class="headerlink" title="2.单链表的反转"></a>2.单链表的反转</h1><ul><li><p>题目</p><p>给定一个单链表，实现单链表的反转</p></li></ul><ul><li>思路分析</li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210808221329.png" alt="反转单链表"></p><ul><li>代码实现</li></ul><p>Node节点类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Node{"</span> +</span><br><span class="line">                <span class="string">"val="</span> + val +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><br><p>反转链表类ReverseList</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseList</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span></span>{</span><br><span class="line"></span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="keyword">null</span>){</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        cur.next = node;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(<span class="string">"链表为空！！！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        Node cur = head.next;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">            System.out.printf(<span class="string">"节点编号：%d \n"</span>, cur.val);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转单链表的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseList</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span> ){</span><br><span class="line">            System.out.println(<span class="string">"不用反转该链表"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        Node cur = head.next;</span><br><span class="line">        Node next = <span class="keyword">null</span>;</span><br><span class="line">        Node newHead = <span class="keyword">new</span> Node(-<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>){  <span class="comment">//遍历链表，cur为遍历到的当前节点</span></span><br><span class="line">            next = cur.next;  <span class="comment">//next 指向当前节点[cur]的下一个节点</span></span><br><span class="line">            cur.next = newHead.next;  <span class="comment">//当前节点[cur]的next域指向新的头节点的下一个节点</span></span><br><span class="line">            newHead.next = cur;   <span class="comment">//newHead的next域指向当前节点[cur]</span></span><br><span class="line">            cur = next;   <span class="comment">//cur后移一位</span></span><br><span class="line">        }</span><br><span class="line">        head.next = newHead.next;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------main--------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ReverseList reverseList = <span class="keyword">new</span> ReverseList();</span><br><span class="line">        reverseList.add(<span class="keyword">new</span> Node(<span class="number">1</span>));</span><br><span class="line">        reverseList.add(<span class="keyword">new</span> Node(<span class="number">3</span>));</span><br><span class="line">        reverseList.add(<span class="keyword">new</span> Node(<span class="number">2</span>));</span><br><span class="line">        reverseList.add(<span class="keyword">new</span> Node(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        reverseList.list();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---反转后的链表---"</span>);</span><br><span class="line">        reverseList.reverseList();</span><br><span class="line">        reverseList.list();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="3-判断一个链表是否为回文结构"><a href="#3-判断一个链表是否为回文结构" class="headerlink" title="3.判断一个链表是否为回文结构"></a>3.判断一个链表是否为回文结构</h1><ul><li>题目</li></ul><p>给定一个链表，请判断该链表是否为回文结构</p><p>例如：</p><p>1-&gt;2-&gt;1,返回true</p><p>1-&gt;2-&gt;2-&gt;1,返回true</p><p>1-&gt;2-&gt;3,返回false</p><ul><li><p>思路分析</p><p>1.遍历链表，将链表的节点依次压入一个栈中</p><p>2.依次弹出栈中的节点，与链表中的节点作比较，如果每次比较的节点的值都相等，则为回文结构</p></li></ul><ul><li>代码实现</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Node节点类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Node{"</span> +</span><br><span class="line">                <span class="string">"val="</span> + val +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断链表是否是回文结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsPalindrome</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span></span>{</span><br><span class="line"></span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="keyword">null</span>){</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        cur.next = node;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>){</span><br><span class="line">            System.out.println(<span class="string">"链表为空！！！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Node cur = head.next;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>){</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        cur = head.next;</span><br><span class="line">        Node popNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; cur != <span class="keyword">null</span>){</span><br><span class="line">            popNode = stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (popNode.val != cur.val){</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------main----------------</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        IsPalindrome palindrome = <span class="keyword">new</span> IsPalindrome();</span><br><span class="line">        palindrome.add(<span class="keyword">new</span> Node(<span class="number">1</span>));</span><br><span class="line">        palindrome.add(<span class="keyword">new</span> Node(<span class="number">2</span>));</span><br><span class="line">        palindrome.add(<span class="keyword">new</span> Node(<span class="number">2</span>));</span><br><span class="line">        palindrome.add(<span class="keyword">new</span> Node(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> palindrome1 = palindrome.isPalindrome();</span><br><span class="line">        System.out.println(palindrome1);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="4-删除无序链表中值重复出现的节点"><a href="#4-删除无序链表中值重复出现的节点" class="headerlink" title="4.删除无序链表中值重复出现的节点"></a>4.删除无序链表中值重复出现的节点</h1><ul><li><p>题目(难度<strong>一星</strong>)</p><p>给定一个无序单链表，删除其中值重复出现的节点</p><p>例如:1-&gt;2-&gt;2-&gt;4-&gt;5-&gt;4-&gt;null,删除值重复之后的链表为：1-&gt;2-&gt;4-&gt;5-&gt;null</p></li></ul><ul><li>思路分析</li></ul><p>1.遍历当前链表，创建Node节点cur指向当前节点，pre指向cur的前一个节点</p><p>2.生成一个哈希表，如果cur的值已经存在于哈希表中，就将当前节点删除<code>(pre.next = cur.next)</code></p><p>​                                  如果cur的值不存在哈希表中，将其加入到哈希表中，同时令pre = cur(为下一次遍历做准备)</p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Node{"</span> +</span><br><span class="line">                <span class="string">"val="</span> + val +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除链表中的重复节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveRepeat</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span></span>{</span><br><span class="line"></span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="keyword">null</span>){</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        cur.next = node;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(<span class="string">"链表为空！！！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        Node cur = head.next;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">            System.out.printf(<span class="string">"节点编号：%d \n"</span>, cur.val);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeRepeat</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>){</span><br><span class="line">            System.out.println(<span class="string">"链表为空！！！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Node cur = head.next;  <span class="comment">//cur指向当前节点</span></span><br><span class="line">        Node pre = head;   <span class="comment">//cur指向当前节点的前一个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">if</span> (set.contains(cur.val)){  <span class="comment">//如果哈希表中包含当前节点cur的值，就删除cur节点</span></span><br><span class="line">                pre.next = cur.next;</span><br><span class="line"></span><br><span class="line">            }<span class="keyword">else</span> {     <span class="comment">//如果不包含，则将cur节点的值加入到哈希表中</span></span><br><span class="line">                set.add(cur.val);</span><br><span class="line">                pre = cur;  <span class="comment">//pre后移一位</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-------------------main---------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        RemoveRepeat remove = <span class="keyword">new</span> RemoveRepeat();</span><br><span class="line"></span><br><span class="line">        remove.add(<span class="keyword">new</span> Node(<span class="number">1</span>));</span><br><span class="line">        remove.add(<span class="keyword">new</span> Node(<span class="number">2</span>));</span><br><span class="line">        remove.add(<span class="keyword">new</span> Node(<span class="number">2</span>));</span><br><span class="line">        remove.add(<span class="keyword">new</span> Node(<span class="number">4</span>));</span><br><span class="line">        remove.add(<span class="keyword">new</span> Node(<span class="number">5</span>));</span><br><span class="line">        remove.add(<span class="keyword">new</span> Node(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        remove.removeRepeat();</span><br><span class="line"></span><br><span class="line">        remove.list();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="5-合并两个有序的单链表"><a href="#5-合并两个有序的单链表" class="headerlink" title="5.合并两个有序的单链表"></a>5.合并两个有序的单链表</h1><ul><li>题目(难度<strong>一星</strong>)</li></ul><p>给定两个有序单链表的头节点head1,head2,请合并两个有序链表，合并后的链表依然有序，并返回合并后链表的头节点</p><p>例如：</p><p>0-&gt;2-&gt;3-&gt;7-&gt;null</p><p>1-&gt;3-&gt;5-&gt;7-&gt;9-&gt;null</p><p>合并后的链表：0-&gt;1-&gt;2-&gt;3-&gt;3-&gt;5-&gt;7-&gt;7-&gt;9-&gt;null</p><ul><li>思路分析</li></ul><p>1.当两个链表都不为空时，遍历两个链表，并比较链表中节点值的大小，将较小的节点加入到</p><p>新的以newHead为头节点的链表中，如果相等，则依次加入两个相等的节点。</p><p>2.若两个链表中其中一个遍历到了末尾，则把另一个链表中的节点加入到新的链表中</p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Node节点类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Node{"</span> +</span><br><span class="line">                <span class="string">"val="</span> + val +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并两个有序的单链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeLinkedList</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node head,Node node)</span></span>{</span><br><span class="line"></span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="keyword">null</span>){</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        cur.next = node;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(Node head)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>){</span><br><span class="line">            System.out.println(<span class="string">"链表为空！！！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        Node cur = head.next;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) {</span><br><span class="line">            System.out.printf(<span class="string">"节点编号：%d \n"</span>, cur.val);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并两个单链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head1 第一个链表的头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head2 第二个链表的头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回新的链表的头节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">merge</span><span class="params">(Node head1,Node head2)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (head1.next == <span class="keyword">null</span> &amp;&amp; head2.next == <span class="keyword">null</span>){</span><br><span class="line">            System.out.println(<span class="string">"两个链表为空！！！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Node newHead = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line">        Node cur = newHead;</span><br><span class="line">        head1 = head1.next;</span><br><span class="line">        head2 = head2.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head1 != <span class="keyword">null</span> &amp;&amp; head2 != <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">if</span> (head1.val &lt; head2.val){</span><br><span class="line">                cur.next = head1;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                head1 = head1.next;</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span> (head2.val &lt; head1.val){</span><br><span class="line">                cur.next = head2;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                head2 = head2.next;</span><br><span class="line">            }<span class="keyword">else</span> {</span><br><span class="line">                cur.next = head1;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                head1 = head1.next;</span><br><span class="line"></span><br><span class="line">                cur.next = head2;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                head2 = head2.next;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head1 != <span class="keyword">null</span>){</span><br><span class="line">            cur.next = head1;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            head1 = head1.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head2 != <span class="keyword">null</span>){</span><br><span class="line">            cur.next = head2;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            head2 = head2.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------main--------------</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MergeLinkedList merge = <span class="keyword">new</span> MergeLinkedList();</span><br><span class="line"></span><br><span class="line">        Node head1 = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line">        Node head2 = <span class="keyword">new</span> Node(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        merge.add(head1,<span class="keyword">new</span> Node(<span class="number">0</span>));</span><br><span class="line">        merge.add(head1,<span class="keyword">new</span> Node(<span class="number">2</span>));</span><br><span class="line">        merge.add(head1,<span class="keyword">new</span> Node(<span class="number">3</span>));</span><br><span class="line">        merge.add(head1,<span class="keyword">new</span> Node(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">        merge.add(head2,<span class="keyword">new</span> Node(<span class="number">1</span>));</span><br><span class="line">        merge.add(head2,<span class="keyword">new</span> Node(<span class="number">3</span>));</span><br><span class="line">        merge.add(head2,<span class="keyword">new</span> Node(<span class="number">5</span>));</span><br><span class="line">        merge.add(head2,<span class="keyword">new</span> Node(<span class="number">7</span>));</span><br><span class="line">        merge.add(head2,<span class="keyword">new</span> Node(<span class="number">9</span>));</span><br><span class="line"></span><br><span class="line">        Node merge1 = merge.merge(head1, head2);</span><br><span class="line"></span><br><span class="line">        merge.list(merge1);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单向环形链表之约瑟夫环</title>
      <link href="/posts/d2de.html"/>
      <url>/posts/d2de.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>Josephus问题:</p><p>约瑟夫问题为：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p><p>例如：</p><p>n = 5 , 即有5个人 </p><p>k = 1, 从第一个人开始报数</p><p>m = 2, 数2下</p><p>出圈的顺序</p><p>2-&gt;4-&gt;1-&gt;5-&gt;3</p></li></ul><br><ul><li>思路图解<ul><li>构建单向环形链表</li></ul></li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210807164227.png"></p><br><ul><li><ul><li>节点出圈的思路图解</li></ul></li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210807164339.png"></p><br><ul><li>代码详情</li></ul><p>Node节点类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小孩节点类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> no;</span><br><span class="line"></span><br><span class="line">    Boy next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boy</span><span class="params">(<span class="keyword">int</span> no)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boy</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><br><p>下面是单向环形链表类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单向环形链表-约瑟夫环</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleCircle</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boy first;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将小孩加入约瑟夫环的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 表示环中结点的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span></span>{</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Boy curBoy = <span class="keyword">null</span>;  <span class="comment">//辅助变量，用来帮助小孩进圈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) {</span><br><span class="line">            Boy boy = <span class="keyword">new</span> Boy(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当加入第一个小孩时，让其自己成环</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>){</span><br><span class="line">                first = boy;  <span class="comment">//first始终指向第一个小孩</span></span><br><span class="line">                first.next = first;</span><br><span class="line">                curBoy = first;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//新的小孩结点的进圈操作</span></span><br><span class="line">            curBoy.next = boy;</span><br><span class="line">            curBoy = curBoy.next;</span><br><span class="line">            curBoy.next = first;</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历圈中的小孩结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span>){</span><br><span class="line">            System.out.println(<span class="string">"圈中没有小孩结点"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Boy cur = first;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>){</span><br><span class="line">            System.out.printf(<span class="string">"当前的小孩编号:%d \n"</span>,cur.no);</span><br><span class="line">            <span class="keyword">if</span> (cur.next == first){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小孩出圈的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startNo 从第几个小孩开始数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 数几次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 圈中小孩的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> startNo,<span class="keyword">int</span> count,<span class="keyword">int</span> num)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span> || startNo &lt; <span class="number">1</span> || startNo &gt; num){</span><br><span class="line">            System.out.println(<span class="string">"参数输入有误！！！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Boy helper = first;<span class="comment">//创建一个辅助指针，让其始终位于first指针的前一个</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//先让first移动到startNo处，即开始报数的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= startNo-<span class="number">1</span>; i++) {</span><br><span class="line">            first = first.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再让helper 移动到first的前一位</span></span><br><span class="line">        <span class="keyword">while</span> (helper.next != first){</span><br><span class="line">            helper = helper.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (helper != first){</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开始报数，让helper和first移动到指定位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count-<span class="number">1</span>; i++) {</span><br><span class="line">                helper = helper.next;</span><br><span class="line">                first = first.next;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//此时first指向要移除的小孩结点</span></span><br><span class="line">            System.out.printf(<span class="string">"出圈小孩的编号：%d \n"</span>,first.no);</span><br><span class="line">            first = first.next;</span><br><span class="line">            helper.next = first;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"最后出圈小孩的编号：%d \n"</span>,first.no);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//***************写个main方法测试一下*******************</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SingleCircle singleCircle = <span class="keyword">new</span> SingleCircle();</span><br><span class="line"></span><br><span class="line">        singleCircle.add(<span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        singleCircle.remove(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 约瑟夫环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表的增删改查和插入</title>
      <link href="/posts/64b9.html"/>
      <url>/posts/64b9.html</url>
      
        <content type="html"><![CDATA[<ul><li>本篇博文属于单链表的入门案例，包含单链表的一些基础操作:增删改查、插入</li></ul><ul><li><p>1.首先创建一个Node结点类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</span><br><span class="line"></span><br><span class="line">    Integer id;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Integer id, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Node{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><br><ul><li>2.然后创建一个单链表类(包含了单链表的增删改查等方法)</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleList</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头结点</span></span><br><span class="line">    <span class="keyword">private</span> Node head = <span class="keyword">new</span> Node();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为当前单向链表添加一个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node node)</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个临时结点指向头结点</span></span><br><span class="line">        Node temp = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一直遍历链表，直到temp.next == null</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>){</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//temp.next == null,说明找到了链表的尾部，将node加入链表中</span></span><br><span class="line">        temp.next = node;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照id修改链表的name</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Node node)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Node temp = head.next;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>){</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (temp.id == node.id){</span><br><span class="line">                temp.name = node.name;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            temp = temp.next;</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id删除节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>){</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (temp.next.id == id){</span><br><span class="line">                temp.next = temp.next.next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Node temp = head.next;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>){</span><br><span class="line"></span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照id编号的大小顺序插入，从小到大</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertById</span><span class="params">(Node node)</span></span>{</span><br><span class="line"></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>){</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果temp结点的下一个为空，直接跳出循环,从这里跳出循环flag=false;</span></span><br><span class="line">            <span class="keyword">if</span>(temp.next == <span class="keyword">null</span>){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//程序走到这里，说明，temp.next != null</span></span><br><span class="line">            <span class="keyword">if</span> (node.id == temp.next.id){</span><br><span class="line"></span><br><span class="line">                flag = <span class="keyword">true</span>;  <span class="comment">//从这里跳出循环flag = true</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span>(node.id &lt; temp.next.id){</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">//从这里跳出循环flag = false;</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这里不用写出node.id &gt; temp.next.id的情况，</span></span><br><span class="line">            <span class="comment">//因为这种情况会一直遍历到链表的末尾，满足temp.next == null条件后，跳出循环，最后在链表末尾加上node</span></span><br><span class="line"></span><br><span class="line">            temp = temp.next;  <span class="comment">//temp 向后移动一位，用来遍历单链表</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag){</span><br><span class="line">            System.out.println(<span class="string">"编号已经存在"</span>);</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">//在此处执行结点的插入操作(适用于在head结点后加结点(即temp.next == null)，以及node.id 小于 temp.next.id的情况)</span></span><br><span class="line">            node.next = temp.next;</span><br><span class="line">            temp.next = node;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SingleList list = <span class="keyword">new</span> SingleList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*list.add(new Node(1,"张三"));</span></span><br><span class="line"><span class="comment">        list.add(new Node(2,"lisi"));</span></span><br><span class="line"><span class="comment">        list.update(new Node(2,"李四"));</span></span><br><span class="line"><span class="comment">        list.add(new Node(3,"王五"));</span></span><br><span class="line"><span class="comment">        list.add(new Node(4,"赵六"));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        list.delete(1);</span></span><br><span class="line"><span class="comment">        list.delete(4);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        list.list();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//*****************上面是增删改查的测试************</span></span><br><span class="line">        <span class="comment">//*****************下面是按顺序插入的测试************</span></span><br><span class="line"></span><br><span class="line">        list.insertById(<span class="keyword">new</span> Node(<span class="number">3</span>,<span class="string">"王3"</span>));</span><br><span class="line">        list.insertById(<span class="keyword">new</span> Node(<span class="number">2</span>,<span class="string">"王2"</span>));</span><br><span class="line">        list.insertById(<span class="keyword">new</span> Node(<span class="number">1</span>,<span class="string">"王1"</span>));</span><br><span class="line">        list.insertById(<span class="keyword">new</span> Node(<span class="number">5</span>,<span class="string">"王5"</span>));</span><br><span class="line">        list.insertById(<span class="keyword">new</span> Node(<span class="number">4</span>,<span class="string">"王4"</span>));</span><br><span class="line">        list.insertById(<span class="keyword">new</span> Node(<span class="number">6</span>,<span class="string">"王6"</span>));</span><br><span class="line"></span><br><span class="line">        list.list();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列刷题笔记</title>
      <link href="/posts/f354.html"/>
      <url>/posts/f354.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-用一个栈实现另一个栈的排序"><a href="#1-用一个栈实现另一个栈的排序" class="headerlink" title="1.用一个栈实现另一个栈的排序"></a>1.用一个栈实现另一个栈的排序</h1><ul><li><p>题目：</p><p>​         一个栈中的类型为整型，现在想将该栈从顶到底按照从大到小的顺序排序，只允许申请一个栈，除此之外，可以申请新的变量，如何排序？</p></li><li><p>思路分析：</p><p>​        将要排序的栈记为stack,申请的辅助栈记为help，在stack上执行pop操作，弹出的元素记为cur</p><ul><li><p>如果cur小于或等于help的栈顶元素，直接将cur压入help</p></li><li><p>如果cur大于help的栈顶元素，则将help中的元素逐次弹出，然后压入stack中，直到cur小于或等于help的栈顶元素，再将cur压入help栈中；</p><p>如果在help栈的弹栈过程中，help已经空了，则说明cur是当前的最大元素，则直接将cur压入help中</p></li><li><p>最后，help中的数，从栈顶到栈底为从小到大的顺序，将help中的数依次弹出压入stack中，则stack从栈顶到栈底为从大到小的顺序</p></li></ul></li><li><p>难度：一星</p></li><li><p>代码实现</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用一个栈实现另一个栈的排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortStackByStack</span> </span>{</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stack <span class="title">sortStack</span><span class="params">(Stack&lt;Integer&gt; stack)</span></span>{</span><br><span class="line"></span><br><span class="line">       Stack&lt;Integer&gt; help = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">       <span class="keyword">while</span> (!stack.isEmpty()){</span><br><span class="line"></span><br><span class="line">           <span class="keyword">int</span> cur = stack.pop();</span><br><span class="line">           <span class="keyword">while</span>(!help.isEmpty() &amp;&amp; cur &gt; help.peek()){</span><br><span class="line">               stack.push(help.pop());</span><br><span class="line">           }</span><br><span class="line"></span><br><span class="line">           help.push(cur);</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (!help.isEmpty()){</span><br><span class="line">           stack.push(help.pop());</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> stack;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        stack.push(<span class="number">8</span>);</span><br><span class="line">        stack.push(<span class="number">7</span>);</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line">        stack.push(<span class="number">4</span>);</span><br><span class="line">        stack.push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        stack = sortStack(stack);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> size = stack.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            System.out.println(stack.pop());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><br><br><h1 id="2-数组中元素与下一个比它大的元素之间的距离"><a href="#2-数组中元素与下一个比它大的元素之间的距离" class="headerlink" title="2.数组中元素与下一个比它大的元素之间的距离"></a>2.数组中元素与下一个比它大的元素之间的距离</h1><p><a href="https://leetcode-cn.com/problems/daily-temperatures/description/">力扣</a>（Medium）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">71</span>, <span class="number">69</span>, <span class="number">72</span>, <span class="number">76</span>, <span class="number">73</span>]</span><br><span class="line">Output: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><ul><li>说明：对于此题，提供两种解法，详情见下面代码</li><li>方法一：暴力求解,<strong>时间复杂度O(N^2)</strong></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间复杂度为O(N^2),每个位置向右遍历一下即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DailyTemperature2</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] rightWay(<span class="keyword">int</span> arr[]){</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">            <span class="keyword">int</span> cur = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> rightMoreIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur &lt; arr.length){</span><br><span class="line">                <span class="keyword">if</span> (arr[cur] &gt; arr[i]){</span><br><span class="line">                    res[i] = cur - i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                cur++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写个main方法测试一下</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] arr = {<span class="number">73</span>,<span class="number">74</span>,<span class="number">75</span>,<span class="number">71</span>,<span class="number">69</span>,<span class="number">72</span>,<span class="number">76</span>,<span class="number">73</span>};</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] res = rightWay(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> re : res) {</span><br><span class="line">            System.out.println(re);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><br><ul><li><p>方法二：遍历数组时，使用<strong>栈</strong>把数组的下标存起来,<strong>时间复杂度O(N)</strong></p></li><li><p>思路分析：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *     1.用dist数组存放距离当前位置的距离，用stack存放原始数组temperature的下标</span></span><br><span class="line"><span class="comment"> *     2.用cur指向temperature数组的下标，pre指向stack栈的栈顶元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     3.如果stack不为空，并且当前遍历的数temperature[cur] 大于 栈顶对应的数temperature[stack.peek()]，</span></span><br><span class="line"><span class="comment"> *     就将stack的栈顶元素弹出，存到pre变量中，cur - pre即为与pre的距离dist[pre].之后再将cur压入stack中。</span></span><br><span class="line"><span class="comment"> *     4.如果stack为空，直接将cur压入stack中。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DailyTemperatures</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] temperature = {<span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">71</span>, <span class="number">69</span>, <span class="number">72</span>, <span class="number">76</span>, <span class="number">73</span>};</span><br><span class="line">        <span class="keyword">int</span>[] dist = dailyTemperatures(temperature);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : dist) {</span><br><span class="line">            System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] dailyTemperatures(<span class="keyword">int</span>[] temperatures) {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] dist = <span class="keyword">new</span> <span class="keyword">int</span>[temperatures.length];</span><br><span class="line">        </span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> cur = <span class="number">0</span>; cur &lt; temperatures.length; cur++) {</span><br><span class="line">            <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[cur] &gt; temperatures[stack.peek()]){</span><br><span class="line">                pre = stack.pop();</span><br><span class="line">                dist[pre] = cur - pre;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            stack.push(cur);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dist;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>  <br><br><h1 id="3-返回数组的最近邻位置（利用单调栈）"><a href="#3-返回数组的最近邻位置（利用单调栈）" class="headerlink" title="3.返回数组的最近邻位置（利用单调栈）"></a>3.返回数组的最近邻位置（利用单调栈）</h1><ul><li><p>题目：</p><p>给定一个不含重复值的数组arr,找到每一个位置i左边和右边离i位置最近且值比arr[i]小的位置，返回左右位置的相应信息</p></li><li><p>举例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">intput:</span><br><span class="line">      arr = {<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>}</span><br><span class="line">output:</span><br><span class="line">{</span><br><span class="line">        {-<span class="number">1</span>,<span class="number">2</span>},</span><br><span class="line">        {<span class="number">0</span>,<span class="number">2</span>},</span><br><span class="line">        {-<span class="number">1</span>,-<span class="number">1</span>},</span><br><span class="line">        {<span class="number">2</span>,<span class="number">5</span>},</span><br><span class="line">        {<span class="number">3</span>,<span class="number">5</span>},</span><br><span class="line">        {<span class="number">2</span>,-<span class="number">1</span>},</span><br><span class="line">        {<span class="number">5</span>,-<span class="number">1</span>},</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></li><li><p>解答：方法一</p><p>本题实现复杂度为O(N^2)的解释非常容易的，每个位置向左和向右遍历一下，总可以确定，见以下代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonotoneStack</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] rightWay(<span class="keyword">int</span>[] arr){</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> leftLessIndex = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> rightLessIndex = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> cur = i-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (cur &gt;= <span class="number">0</span>){</span><br><span class="line">                <span class="keyword">if</span> (arr[cur] &lt; arr[i]){</span><br><span class="line">                    leftLessIndex = cur;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                cur--;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            cur = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur &lt; arr.length){</span><br><span class="line">                <span class="keyword">if</span> (arr[cur] &lt; arr[i]){</span><br><span class="line">                    rightLessIndex = cur;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                cur++;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            res[i][<span class="number">0</span>] = leftLessIndex;</span><br><span class="line">            res[i][<span class="number">1</span>] = rightLessIndex;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArr2</span><span class="params">(<span class="keyword">int</span>[][] arr)</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[<span class="number">0</span>].length; j++) {</span><br><span class="line">                System.out.print(arr[i][j]+<span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = {<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>};</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] res = rightWay(arr);</span><br><span class="line"></span><br><span class="line">        printArr2(res);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><br><br></li><li><p>方法二：利用单调栈结构，时间复杂度为O(N)</p></li><li><p>思路分析：</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单调栈——返回最近邻的位置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 准备一个栈，记为Stack&lt;integer&gt;,栈中存放的元素是数组的位置，开始stack为空，如果找到每一个位置i左边</span></span><br><span class="line"><span class="comment"> * 和右边离i位置最近且值比arr[i]小的位置，那么需要让stack从栈顶到栈底的位置所代表的值是递减的(也就是从大到小)；</span></span><br><span class="line"><span class="comment"> * 如果找到每一个位置i左边和右边离i位置最近且值比arr[i]大的位置，那么需要让stack从栈顶到栈底的位置所代表的值是递增的。</span></span><br><span class="line"><span class="comment"> * 本题需要解决是前者。</span></span><br><span class="line"><span class="comment"> *     下面举例展示单调栈的使用和求解流程，以arr = {3,4,1,5,6,2,7}为例。</span></span><br><span class="line"><span class="comment"> *     1.初始时，arr = {3,4,1,5,6,2,7},stack为空。</span></span><br><span class="line"><span class="comment"> *     2.遍历arr数组，遍历到arr[0] = 3时，stack为空，直接将0压入stack中，此时，stack中从栈顶到栈底为{0(值为3)}</span></span><br><span class="line"><span class="comment"> *     3.遍历到arr[1]=4时，`arr[1] &gt; arr[stack.peek()]`，将1压入到stack中，此时，stack从栈顶到栈底为</span></span><br><span class="line"><span class="comment"> *     {1(值为4)，0(值为3)}</span></span><br><span class="line"><span class="comment"> *     4.遍历到arr[2] = 1时，如果将下标2压入stack中，会破坏stack从栈顶到栈底所代表的的值是递减的规律，</span></span><br><span class="line"><span class="comment"> *     那么，此时将stack的栈顶元素"1"弹出，位置1左边比它代表的值小的下标即为此时stack栈的栈顶元素"0"，</span></span><br><span class="line"><span class="comment"> *     位置1右边比它代表的值小的下标，即为当前遍历的下标"2"，那么res[1] = {0,2}。此时，stack从栈顶到栈底为{0(值为3)}，</span></span><br><span class="line"><span class="comment"> *     如果将下标2压入stack中，依旧会破坏stack从栈顶到栈底的元素所代表的值是递减的规律，此时将stack的栈顶元素"0"弹出，stack栈已经空了，</span></span><br><span class="line"><span class="comment"> *     位置0左边不存在比它小的数，默认取-1，位置0右边比它代表的值小的下标，即为当前遍历的下标"2"，那么res[0] = {-1,2}。</span></span><br><span class="line"><span class="comment"> *     这时，stack为空，将"2"压入stack中，stack从栈顶到栈底的元素为{2(值为1)}</span></span><br><span class="line"><span class="comment"> *     5.按照此规律继续遍历下去......</span></span><br><span class="line"><span class="comment"> *     6.遍历阶段结束后，stack从栈顶到栈底的元素为{6(值为7),5(值为2),2(值为1)}。</span></span><br><span class="line"><span class="comment"> *     下面清算stack中剩下的元素，将stack的栈顶元素"6"弹出，栈中它的下面位置是5，而由于6位置是清算阶段弹出的，所以res[6] = {5,-1};</span></span><br><span class="line"><span class="comment"> *     弹出5位置，栈中它的下面位置是2,5位置是清算阶段弹出的，所以res[5] = {2,-1};</span></span><br><span class="line"><span class="comment"> *     弹出2位置，栈中它的下面没有位置了,2位置是清算阶段弹出的，所以res[2] = {-1,-1};</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><ul><li>代码实现</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单调栈——返回最近邻的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonotoneStack2</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] getNearLessNoRepeat(<span class="keyword">int</span>[] arr){</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length][<span class="number">2</span>];</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历阶段</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line"></span><br><span class="line">             <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; arr[i] &lt; arr[stack.peek()]){</span><br><span class="line"></span><br><span class="line">                 <span class="keyword">int</span> popIndex = stack.pop();</span><br><span class="line">                 <span class="keyword">int</span> leftLessIndex = stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">                 res[popIndex][<span class="number">0</span>] = leftLessIndex;</span><br><span class="line">                 res[popIndex][<span class="number">1</span>] = i;</span><br><span class="line">             }</span><br><span class="line">             stack.push(i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始清算阶段</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()){</span><br><span class="line">            <span class="keyword">int</span> popIndex = stack.pop();</span><br><span class="line">            <span class="keyword">int</span> leftLessIndex = stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">            res[popIndex][<span class="number">0</span>] = leftLessIndex;</span><br><span class="line">            res[popIndex][<span class="number">1</span>] = -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArr2</span><span class="params">(<span class="keyword">int</span>[][] arr)</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[<span class="number">0</span>].length; j++) {</span><br><span class="line">                System.out.print(arr[i][j]+<span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">""</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = {<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>};</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] res = getNearLessNoRepeat(arr);</span><br><span class="line"></span><br><span class="line">        printArr2(res);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode题解-栈和队列</title>
      <link href="/posts/b04a.html"/>
      <url>/posts/b04a.html</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-用栈实现队列"><a href="#1-用栈实现队列" class="headerlink" title="1.用栈实现队列"></a>1.用栈实现队列</h1><p>栈的顺序为后进先出，而队列的顺序为先进先出。使用两个栈实现队列，一个元素需要经过两个栈才能出队列，在经过第一个栈时元素顺序被反转，经过第二个栈时再次被反转，此时就是先进先出顺序。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackForQueue</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先准备两个栈</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; in = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; out = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先将元素压入第一个栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Integer val)</span></span>{</span><br><span class="line">        in.push(val);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将入栈的数据弹出，压入出栈中</span></span><br><span class="line">    <span class="comment">//在这个过程中，必须保证出栈为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in2out</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (out.isEmpty()){  <span class="comment">//如果出栈为空，才操作</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(!in.isEmpty()){</span><br><span class="line">                out.push(in.pop());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于一个出队列的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//先将 入栈 中的数据 压入到出栈中，这样，经过栈的两次“先进后出”，就实现了队列的“先进先出”</span></span><br><span class="line">        in2out();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out.pop();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看当前的队列的头</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span></span>{</span><br><span class="line">        in2out();</span><br><span class="line">        <span class="keyword">return</span> out.peek();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> in.isEmpty() &amp;&amp; out.isEmpty();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个main方法测试一下结果 ***********************************************</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        StackForQueue queue = <span class="keyword">new</span> StackForQueue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) {</span><br><span class="line">            queue.push(i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) {</span><br><span class="line">            System.out.println(queue.pop());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="2-用队列实现栈"><a href="#2-用队列实现栈" class="headerlink" title="2.用队列实现栈"></a>2.用队列实现栈</h1><p>在将一个元素 x 插入队列时，为了维护原来的后进先出顺序，需要让 x 插入队列首部。而队列的默认插入顺序是队列尾部，因此在将 x 插入队列尾部之后，需要让除了 x 之外的所有元素出队列，再入队列。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在队列这种数据结构中，最先插入的元素将是最先被删除的元素；</span></span><br><span class="line"><span class="comment"> * 反之最后插入的元素将是最后被删除的元素，因此队列又称为“先进先出”（FIFO—first in first out）的线性表。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Queue用法小结：</span></span><br><span class="line"><span class="comment"> * Queue使用时要尽量避免Collection的add()和remove()方法，</span></span><br><span class="line"><span class="comment"> * 而是要使用offer()来加入元素，使用poll()来获取并移出元素。</span></span><br><span class="line"><span class="comment"> * 它们的优点是通过返回值可以判断成功与否。</span></span><br><span class="line"><span class="comment"> * 而add()和remove()方法在失败的时候会抛出异常。</span></span><br><span class="line"><span class="comment"> * 如果要使用前端而不移出该元素，使用element()或者peek()方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueForStack</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QueueForStack</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//LinkedList类实现了Queue接口，因此我们可以把LinkedList当成Queue来用</span></span><br><span class="line">        queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">        <span class="comment">//首先将val加入到队列中，此时，val位于队列的最后一位</span></span><br><span class="line">        queue.offer(val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取队列的大小</span></span><br><span class="line">        <span class="keyword">int</span> count = queue.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">1</span>){</span><br><span class="line">            <span class="comment">//将当前队列的除val之外的所有元素，先取出队列，再放入队列</span></span><br><span class="line">            <span class="comment">//此时，val就位于队列的首位，那么，就实现了栈的“后进先出”</span></span><br><span class="line">            queue.offer(queue.poll());</span><br><span class="line">            count--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> queue.poll();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//查看当前的队列头</span></span><br><span class="line">        <span class="keyword">return</span> queue.peek();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个main方法，测试一下  *****************************************</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        QueueForStack queue = <span class="keyword">new</span> QueueForStack();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++) {</span><br><span class="line">            queue.push(i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) {</span><br><span class="line">            System.out.println(queue.pop());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="3-最小值栈：设计一个有getMin功能的栈"><a href="#3-最小值栈：设计一个有getMin功能的栈" class="headerlink" title="3.最小值栈：设计一个有getMin功能的栈"></a>3.最小值栈：设计一个有getMin功能的栈</h1><ul><li><p>题目：实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈中最小元素的操作</p></li><li><p>要求：</p><ul><li>1.pop,push,getMin操作的时间复杂度都是O(1)</li><li>设计的栈类型可以使用现成的栈结构</li></ul></li><li><p>思路分析：在设计时，使用两个栈，一个栈用来保存所有的元素，其功能和一个正常的栈没有区别，这个栈记为dataStack.</p><p>另一个用来保存每一步的最小值，这个栈的栈针始终指向当前放入栈中元素的最小值，这个栈记为minStack.</p></li><li><p>代码实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMinStack</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; dataStack;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; minStack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyMinStack</span><span class="params">()</span></span>{</span><br><span class="line">        dataStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        minStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> data)</span></span>{</span><br><span class="line">        dataStack.push(data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当minStack为空时，放入data</span></span><br><span class="line">        <span class="keyword">if</span> (minStack.isEmpty()){</span><br><span class="line">            minStack.push(data);</span><br><span class="line"></span><br><span class="line">        }<span class="keyword">else</span> {  <span class="comment">//当minStack不为空时,如果minStack的栈顶元素大于data时，</span></span><br><span class="line">                 <span class="comment">// 将data放入minStack,此时就能保证,minStack的栈顶元素为dataStack的最小值</span></span><br><span class="line">            <span class="keyword">if</span>(minStack.peek() &gt; data){</span><br><span class="line">                minStack.push(data);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (dataStack.isEmpty()){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Your Stack is empty!!!"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dataStack.pop();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (minStack.isEmpty()){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Your Stack is empty!"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> dataStack.isEmpty();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个main测试一下******************************************</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MyMinStack stack = <span class="keyword">new</span> MyMinStack();</span><br><span class="line"></span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line">        stack.push(<span class="number">5</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">4</span>);</span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        stack.push(<span class="number">8</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(stack.getMin()); <span class="comment">//1</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>​       对于实现最小值队列问题，可以先将队列使用栈来实现，然后就将问题转换为最小值栈，这个问题出现在 编程之美：3.7。</p><h1 id="4-用栈实现括号的匹配（Easy）"><a href="#4-用栈实现括号的匹配（Easy）" class="headerlink" title="4. 用栈实现括号的匹配（Easy）"></a>4. 用栈实现括号的匹配（Easy）</h1><p><a href="https://leetcode-cn.com/problems/valid-parentheses/description/">力扣</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">case1:</span><br><span class="line">Input:<span class="string">"()[]{}"</span></span><br><span class="line"></span><br><span class="line">Output : <span class="keyword">true</span></span><br><span class="line">    </span><br><span class="line">case2:</span><br><span class="line">Input:<span class="string">"({})"</span></span><br><span class="line"></span><br><span class="line">Output : <span class="keyword">true</span>    </span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><ul><li>代码实现</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用栈实现括号的匹配</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Input:"()[]{}"</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Output : true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidParentheses</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()){</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span> || c == <span class="string">'{'</span> || c == <span class="string">'['</span>){</span><br><span class="line">                <span class="comment">//当满足"左括号"的条件时，压入栈中</span></span><br><span class="line">                stack.push(c);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果此时栈中还为空，则不满足条件</span></span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()){</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">//走到这一步，说明栈中不为空，此时"c"，满足为括号的右半部分</span></span><br><span class="line">                <span class="comment">//此时弹栈拿出括号的坐半部分left</span></span><br><span class="line">                <span class="keyword">char</span> left = stack.pop();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//以下三个条件说明，在弹栈得到的left时,括号右半部分匹配不上，就返回false;</span></span><br><span class="line">                <span class="keyword">boolean</span> b1 = left == <span class="string">'('</span> &amp;&amp; c != <span class="string">')'</span>;</span><br><span class="line">                <span class="keyword">boolean</span> b2 = left == <span class="string">'{'</span> &amp;&amp; c != <span class="string">'}'</span>;</span><br><span class="line">                <span class="keyword">boolean</span> b3 = left == <span class="string">'['</span> &amp;&amp; c != <span class="string">']'</span>;</span><br><span class="line">                <span class="keyword">if</span> (b1 || b2 || b3){</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试 *******************************</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ValidParentheses vp = <span class="keyword">new</span> ValidParentheses();</span><br><span class="line">        System.out.println(vp.isValid(<span class="string">"()"</span>));  <span class="comment">//true</span></span><br><span class="line">        System.out.println(vp.isValid(<span class="string">"()[]{}"</span>));  <span class="comment">//true</span></span><br><span class="line">        System.out.println(vp.isValid(<span class="string">"{[]}"</span>));  <span class="comment">//true</span></span><br><span class="line">        System.out.println(vp.isValid(<span class="string">"(]"</span>));   <span class="comment">//false</span></span><br><span class="line">        System.out.println(vp.isValid(<span class="string">"([)]"</span>));  <span class="comment">//false</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用数组实现栈</title>
      <link href="/posts/c93a.html"/>
      <url>/posts/c93a.html</url>
      
        <content type="html"><![CDATA[<p>   本例子利用数组实现”栈”这种数据结构，算一个栈的入门案例</p><ul><li>栈的特点：先进后出，后进先出</li><li>在实现栈的弹栈，压栈的操作之前，要判断栈是否为空栈或满栈</li><li>数组的长度即为栈的容量</li></ul><hr><ul><li><p>写一个ArrayForStack类，在这个类中，实现栈的弹栈、压栈等方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayForStack</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> top = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayForStack</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造方法，利用构造方法给属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayForStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        <span class="keyword">this</span>.array = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> top == maxSize-<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">if</span> (isFull()){</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> Exception(<span class="string">"栈已经满了，不能继续压栈了"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        array[++top] = num;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"栈已经空了，不能弹栈"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        temp = array[top--];</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>编写一个测试类，测试栈的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//栈的容量</span></span><br><span class="line">        <span class="keyword">int</span> maxSize = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        ArrayForStack stack = <span class="keyword">new</span> ArrayForStack(maxSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//压栈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxSize; i++) {</span><br><span class="line">            stack.push(i);  <span class="comment">//依次压入0 1 2 3 4 5</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//弹栈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxSize; i++) {</span><br><span class="line">            System.out.println(stack.pop());   <span class="comment">//依次弹出5 4 3 2 1 0</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>接下来利用上面编写的ArrayForStack类，再实现一个<strong>回文字符串</strong>判断的例子</p><p>所谓的回文字符串即为：从左往右 与 从右往左 读这个字符串，结果是一样的</p><p>比如：”aba”就是一个回文串，而:”hello”,从右往左为”olleh”,则”hello”不是一个回文串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPalindrome</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">        System.out.println(detection(<span class="string">"abcdedcba"</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">detection</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = str.length();</span><br><span class="line">        </span><br><span class="line">        ArrayForStack stack = <span class="keyword">new</span> ArrayForStack(length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) {</span><br><span class="line">            stack.push(str.charAt(i));</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        String newStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty()){</span><br><span class="line">                <span class="keyword">char</span> s = (<span class="keyword">char</span>)stack.pop();</span><br><span class="line">                newStr += s;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (str.equals(newStr)){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 回文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github高效搜索项目</title>
      <link href="/posts/2a1b.html"/>
      <url>/posts/2a1b.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>利用项目名(仓库名)</p><p>例如<code>in:name spring boot</code></p></li></ul><ul><li><p>利用项目名+stars</p><p><code>in:name spring boot stars:&gt;1000</code></p></li></ul><ul><li><p>利用项目名+stars+forks</p><p><code>in:name spring boot stars:&gt;1000 forks:&gt;100</code></p></li></ul><ul><li><p>利用readme</p><p><code>in:readme springboot</code></p></li></ul><ul><li><p>利用readme+stars</p><p><code>in:readme springboot stars:&gt;1000</code></p></li></ul><ul><li><p>利用description</p><p><code>in:description 微服务</code></p></li></ul><ul><li><p>利用description + language</p><p><code>in:description 微服务 language:java</code>  </p></li></ul><ul><li><p>利用description + language+日期</p><p><code>in:description 微服务 language:java pushed:&gt;2019-9-9</code>  </p></li></ul><ul><li>点进去查看项目的：描述利用了那些技术，代码结构、最新push日期、火热程度等，查看项目的readme文档</li><li>把github用起来，多去github看开源项目</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> github搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git和github的使用</title>
      <link href="/posts/ec43.html"/>
      <url>/posts/ec43.html</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="1-Git常用命令"><a href="#1-Git常用命令" class="headerlink" title="1.Git常用命令"></a>1.Git常用命令</h2><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210730164403.png"></p><h2 id="2-分支的操作"><a href="#2-分支的操作" class="headerlink" title="2.分支的操作"></a>2.分支的操作</h2><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210730165654.png"></p><h2 id="3-远程仓库操作"><a href="#3-远程仓库操作" class="headerlink" title="3.远程仓库操作"></a>3.远程仓库操作</h2><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210730190522.png"></p><h2 id="4-IDEA集成git、github"><a href="#4-IDEA集成git、github" class="headerlink" title="4.IDEA集成git、github"></a>4.IDEA集成git、github</h2><ul><li>1.确保idea已经集成了git和github</li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731104620.png" alt="git"></p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731104957.png" alt="github"></p><ul><li>2.回到idea主界面，创建一个git repository</li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731105254.png" alt="创建git仓库"></p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731105926.png"></p><ul><li>3.将代码加入暂存区</li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731105744.png"></p><ul><li><p>代码加入暂存区后，文件名由红色变为蓝色</p></li><li><p>4.将代码提交至本地库</p></li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731111519.png" alt="代码提交本地库"></p><ul><li>代码提交至本地库后，文件名由蓝色变为正常的白色</li></ul><ul><li>5.查看git的log和master信息</li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731113511.png"></p><ul><li><ul><li>切换version</li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731113939.png" alt="切换version"></li><li>创建分支</li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731114259.png"></li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731114502.png" alt="创建一个hot_fix分支"></li></ul></li></ul><ul><li><p>6.合并分支</p></li><li><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731114742.png"></p></li><li><p>在hot_fix分支下，加一行代码，并提交至本地库</p></li></ul><ul><li>注意：master分支想要合并hot_fix分支，必须在master分支下merge</li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731120213.png"></li></ul><ul><li>已经切换至master</li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731115506.png"></p><ul><li>开始合并</li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731120533.png"></li></ul><ul><li>成功合并</li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731120755.png" alt="image-20210731120755672"></li></ul><p>备注：以上演示的为无冲突合并，如果遇到冲突合并(简单理解为：对代码做了不同的修改)，需要进行手动选择代码，然后合并</p><hr><ul><li><p>7.将代码推送至远程github仓库</p><ul><li>7.1 使用ssh免密登陆<ul><li> 进入C:/Users/Administrator/.ssh文件夹，右键选择“Git Bash Here ”</li><li>在命令行输入<code>ssh-keygen -t rsa -C 邮箱  </code>，连续三次回车(其中有一次问你，要不要覆盖文件)</li><li>然后输入<code>cat id_rsa.pub  </code>,得到其文件内容，如下图</li></ul></li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731135430.png"></li></ul></li><li><ul><li><ul><li>复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPG keys →New SSH key</li><li>新建一个SSH key</li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731140056.png"></li></ul></li></ul></li></ul><ul><li><ul><li>7.2新建一个远程github仓库，用来储存来自本地仓库的代码，如下图</li><li><ul><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731140751.png" alt="方式一，新建github仓库"></li></ul></li></ul></li><li><ul><li><ul><li>方式二，新建github仓库</li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731141204.png" alt="idea中选择share project on github"></li></ul></li></ul></li><li><ul><li><ul><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731141455.png" alt="分享仓库到github"></li></ul></li></ul></li><li><ul><li>7.3push代码到github仓库</li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731142219.png" alt="复制仓库的ssh链接"></li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731142602.png" alt="准备push代码到github仓库"></li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731142837.png" alt="push代码到github仓库"></li></ul></li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731143015.png" alt="push成功后的github仓库"></p><ul><li><ul><li><p>push代码的重要提示</p><p>注意： push 是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，<br>push 的操作是会被拒绝的。也就是说， 要想 push 成功，一定要保证本地库的版本要比远程<br>库的版本高！ 因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地<br>代码的区别！如果本地的代码版本已经落后，切记要先 pull 拉取一下远程库的代码，将本地<br>代码更新到最新以后，然后再修改，提交，推送！  </p></li></ul></li></ul><ul><li>8 pull 拉取远程库到本地库  <ul><li>首先更新一下github仓库的代码，以示本地和远程的区别</li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731145656.png" alt="本地远程比较"></li><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731143931.png" alt="pull后的本地代码"></li></ul></li></ul><ul><li>9.克隆代码到本地，并利用idea打开<ul><li><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210731144907.png" alt="克隆代码到本地"></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot集成mybatis-plus</title>
      <link href="/posts/667f.html"/>
      <url>/posts/667f.html</url>
      
        <content type="html"><![CDATA[<ul><li>本博客基于springboot-web项目，集成thymeleaf，和mybatis-plus可以实现数据的CRUD和分页显示数据功能</li></ul><h1 id="案例一：实现数据的CRUD"><a href="#案例一：实现数据的CRUD" class="headerlink" title="案例一：实现数据的CRUD"></a>案例一：实现数据的CRUD</h1><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210728140408.png" alt="代码的结构"></p><h2 id="依赖及配置"><a href="#依赖及配置" class="headerlink" title="依赖及配置"></a>依赖及配置</h2><ul><li>1.新建一个springboot-web项目，并选中thymeleaf模板引擎</li><li>2.加入依赖</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>3.配置mysql的账号密码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=mysql密码</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="代码详情"><a href="#代码详情" class="headerlink" title="代码详情"></a>代码详情</h2><ul><li><p>1.控制层代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动注入业务层的StudentService</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/queryAll")</span>   <span class="comment">//请求路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAll</span><span class="params">(Model model)</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用业务层的方法，查询所有学生</span></span><br><span class="line">        List&lt;Student&gt; students = studentService.list();</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"students"</span>,students);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将查询结果放入request作用域，并返回到视图层</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"mybatis-plus"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>2.业务层代码(包括一个接口和实现类)</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Student</span>&gt; </span>{</span><br><span class="line">    <span class="comment">//IService&lt;T&gt; 中的 T 是实体</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>IService为mybatis-plus提供的接口，里面提供了CRUD的基本方法,我们的业务层接口需要实现IService这个接口</p><ul><li>3.业务接口实现类</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">StudentMapper</span>, <span class="title">Student</span>&gt; <span class="keyword">implements</span> <span class="title">StudentService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ServiceImpl&lt;M extends BaseMapper&lt;T&gt;, T&gt; 中的泛型：M 是 mapper 对象，T 是实体</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>StudentServiceImpl 继承了ServiceImpl，而ServiceImpl是IService 实现类，它提供了IService中方法的具体实现。我们写的业务接口实现类需要继承ServiceImpl这个类，并且要实现我们自己写的StudentService这个接口</p><p>下面给出ServiceImpl类的部分代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IService 实现类（ 泛型：M 是 mapper 对象，T 是实体 ）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span>&lt;<span class="title">M</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IService</span>&lt;<span class="title">T</span>&gt; </span>{}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>4.持久层代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Student</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>StudentMapper继承了 BaseMapper<t>这一接口，当我们编写的Mapper接口 继承该接口后，无需编写 mapper.xml 文件，即可获得CRUD功能</t></p><p>说明：除了在该类的上面添加@Mapper,注明这是一个持久层之外，还可以在程序的主入口添加@MapperScan注解(两个注解选择一个使用即可)</p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210728143021.png"></p></li></ul><ul><li><p>5.实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName("t_student")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    setter and getter</span><br><span class="line">        </span><br><span class="line">    toString</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>@TableName(“t_student”)由mybatis-plus提供，作用使该实体类与对应的数据库中的表名对应，例如类Student&lt;===&gt;表t_student</p><p>@TableField(exist = false)由mybatis-plus提供,作用是标注出，数据库中的表不存在该字段</p><ul><li>5.视图层的代码(由控制层转到视图层mybatis-plus.html)</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>查询所有学生<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"student:${students}"</span>&gt;</span>   <span class="comment">&lt;!--thymeleaf循环一个list--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[${student.id}]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span>       <span class="comment">&lt;!--thymeleaf的行内写法，取出相应的变量--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[${student.name}]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[${student.age}]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>6查询结果</p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210728144549.png"></p></li></ul><p>与数据库中的数据一致</p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210728144649.png"></p><h1 id="案例二：实现分页数据的展示"><a href="#案例二：实现分页数据的展示" class="headerlink" title="案例二：实现分页数据的展示"></a>案例二：实现分页数据的展示</h1><ul><li>数据的分页展示，在案例一的基础上修改而来</li></ul><h2 id="分页功能具体实现"><a href="#分页功能具体实现" class="headerlink" title="分页功能具体实现"></a>分页功能具体实现</h2><ul><li><p>1.新建一个配置类，用来加载分页插件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"加载分页插件"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li>2.修改控制层代码</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/queryAll")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAll</span><span class="params">(<span class="meta">@RequestParam(value = "pn",defaultValue = "1")</span> Integer pn,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Model model)</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页查询，pn表示当前页，6表示每页几条数据</span></span><br><span class="line">        Page&lt;Student&gt; studentPage = <span class="keyword">new</span> Page&lt;&gt;(pn,<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//分页查询结果</span></span><br><span class="line">        Page&lt;Student&gt; page = studentService.page(studentPage, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        page.getCurrent(); <span class="comment">//获取当前页</span></span><br><span class="line">        page.getPages();   <span class="comment">//获取总的页数</span></span><br><span class="line">        page.getTotal();   <span class="comment">//获取总记录数</span></span><br><span class="line">        </span><br><span class="line">        model.addAttribute(<span class="string">"page"</span>,page);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"mybatis-plus"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><ul><li>访问路径为<code>“/queryAll”</code>,请求参数为<code>pn</code>,表示当前页，默认为1</li><li>调用<code>studentService.page()</code>,即可得到Page对象，其内部属性，就是我们想要的与分页功能相关的数据</li><li>将page放入request作用域</li></ul></li></ul><ul><li>3.修改视图显示的代码</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>查询所有学生<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"student:${page.records}"</span>&gt;</span> <span class="comment">&lt;!--thymeleaf循环一个list--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[${student.id}]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span>      <span class="comment">&lt;!--thymeleaf的行内写法，取出相应的变量--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[${student.name}]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[${student.age}]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上方展示的student详情的list集合，必须从page.records中取--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#########################以下内容与分页功能相关###############################--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[[${page.current}]]为thymeleaf的写法，可以取出request域的变量--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--page.current、page.pages、page.total都是放在request作用域中的变量page的属性}--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>当前第 [[${page.current}]] 页 总计 [[${page.pages}]] 页 共 [[${page.total}]] 条记录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--#numbers.sequence(1,page.pages)，该表达式是thymeleaf的写法。</span></span><br><span class="line"><span class="comment">            表示可以生成一个从"1"到"page.pages"的序列,然后用thymeleaf的foreach循环，就可以得到页码num了--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"num:${#numbers.sequence(1,page.pages)}"</span> &gt;</span></span><br><span class="line">                <span class="comment">&lt;!--下面的写法为thymeleaf的超链接写法</span></span><br><span class="line"><span class="comment">                    [[${num}]]用来显示页码数</span></span><br><span class="line"><span class="comment">                    @{/queryAll(pn=${num})}表示超链接的链接地址,(pn=${num})表示请求参数</span></span><br><span class="line"><span class="comment">                    @{/queryAll(pn=${num})}等价于@{/queryAll?pn=num}</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@{/queryAll(pn=${num})}"</span>&gt;</span>[[${num}]]<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>前端分页功能代码的说明见注释</li></ul><hr><ul><li><p>结果展示</p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210728190430.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mybatis-plus </tag>
            
            <tag> 分页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot定制化组件的方式</title>
      <link href="/posts/4e7c.html"/>
      <url>/posts/4e7c.html</url>
      
        <content type="html"><![CDATA[<h2 id="定制化组件的常见方式"><a href="#定制化组件的常见方式" class="headerlink" title="定制化组件的常见方式"></a>定制化组件的常见方式</h2><ul><li><p>修改配置文件；</p></li><li><p><strong>xxxxxCustomizer；</strong></p></li><li><p><strong>编写自定义的配置类   xxxConfiguration；+</strong> <strong>@Bean替换、增加容器中默认组件；视图解析器</strong> </p></li><li><p><strong>Web应用 编写一个配置类实现</strong> <strong>WebMvcConfigurer 即可定制化web功能；(+ @Bean给容器中再扩展一些组件,可选的)</strong></p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>{}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>@EnableWebMvc + WebMvcConfigurer —— @Bean  可以全面接管SpringMVC，所有规则全部自己重新配置； </p><p>实现定制和扩展功能</p><ul><li><p>原理</p></li><li><p> 1、WebMvcAutoConfiguration  默认的SpringMVC的自动配置功能类。静态资源、欢迎页…..</p></li><li><p>2、一旦使用 @EnableWebMvc 会 @Import(DelegatingWebMvcConfiguration.<strong>class</strong>)</p></li><li><p>3、<strong>DelegatingWebMvcConfiguration</strong> 的 作用，只保证SpringMVC最基本的使用</p><ul><li><p>把所有系统中的 WebMvcConfigurer 拿过来。所有功能的定制都是这些 WebMvcConfigurer  合起来一起生效</p></li><li><p>自动配置了一些非常底层的组件。<strong>RequestMappingHandlerMapping</strong>、这些组件依赖的组件都是从容器中获取</p><ul><li> <strong>public class</strong> DelegatingWebMvcConfiguration <strong>extends</strong> <strong>WebMvcConfigurationSupport</strong></li></ul></li></ul></li><li><p>4、<strong>WebMvcAutoConfiguration</strong> 里面的配置要能生效 必须  @ConditionalOnMissingBean(<strong>WebMvcConfigurationSupport</strong>.<strong>class</strong>)</p></li><li><p>5、@EnableWebMvc  导致了 <strong>WebMvcAutoConfiguration  没有生效。</strong></p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> springboot定制化组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot文件上传</title>
      <link href="/posts/c59d.html"/>
      <url>/posts/c59d.html</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>springboot中文件上传，可以将上传的文件保存到本地，或者保存到文件服务器，OSS</li><li>下面通过一个springboot-thymeleaf项目，演示这一过程</li></ul><h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h2><ul><li>1.浏览器地址栏访问：http:localhost:8080/,跳转到templates/file_form.html</li><li>2.在file_form.html页面，选择需要上传的文件(支持单个、多个文件上传，文件的最大值在配置文件中指定)，提交后转到控制层的upload方法</li><li>3.在upload方法中，上传的文件被保存到本地</li></ul><h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><ul><li>项目文件结构</li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210727160921.png" alt="image-20210727160915269"></p><ul><li><p>控制层代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"file_form"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("/upload")</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestPart("picture")</span> MultipartFile picture,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestPart("photos")</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="keyword">if</span>(!picture.isEmpty()){</span><br><span class="line">            String originalFilename = picture.getOriginalFilename();</span><br><span class="line">            <span class="comment">//保存文件到本地</span></span><br><span class="line">            picture.transferTo(<span class="keyword">new</span> File(<span class="string">"E:\\test\\"</span>+originalFilename));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (photos.length &gt; <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">for</span> (MultipartFile photo : photos) {</span><br><span class="line">                <span class="keyword">if</span> (!photo.isEmpty()){</span><br><span class="line">                    String originalFilename = photo.getOriginalFilename();</span><br><span class="line">                    <span class="comment">//保存文件到本地</span></span><br><span class="line">                    photo.transferTo(<span class="keyword">new</span> File(<span class="string">"E:\\test\\"</span>+originalFilename));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"文件上传成功"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>前端的file_form.html页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">th:action</span>=<span class="string">"@{/upload}"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line">  单个文件:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"picture"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  多个文件:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"photos"</span> <span class="attr">multiple</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>项目的配置文件</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传总文件的最大值</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-request-size</span>=<span class="string">100MB</span></span><br><span class="line"><span class="comment"># 单个文件的最大值</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>启动程序</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootFileUploadApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(SpringbootFileUploadApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interceptor拦截器的使用</title>
      <link href="/posts/ce45.html"/>
      <url>/posts/ce45.html</url>
      
        <content type="html"><![CDATA[<h1 id="springboot项目中拦截器的使用"><a href="#springboot项目中拦截器的使用" class="headerlink" title="springboot项目中拦截器的使用"></a>springboot项目中拦截器的使用</h1><ul><li>1.编写一个拦截器实现HandlerInterceptor接口</li><li>2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors）</li><li>3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】</li></ul><hr><h2 id="1-实现HandlerInterceptor接口"><a href="#1-实现HandlerInterceptor接口" class="headerlink" title="1.实现HandlerInterceptor接口"></a>1.实现HandlerInterceptor接口</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目标方法执行之前，进行拦截</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"preHandle方法执行了{}"</span>,request.getRequestURI());</span><br><span class="line">        String userName = (String) request.getSession().getAttribute(<span class="string">"userName"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(userName != <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/"</span>).forward(request,response);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目标方法执行完成之后</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"postHandle方法执行了{}"</span>,modelAndView);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//页面渲染之后</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"afterCompletion方法执行了"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-拦截器注册到容器中"><a href="#2-拦截器注册到容器中" class="headerlink" title="2.拦截器注册到容器中"></a>2.拦截器注册到容器中</h2><ul><li><p>实现WebMvcConfigurer的addInterceptors</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line"></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)              <span class="comment">//需要拦截的资源</span></span><br><span class="line">                .excludePathPatterns(<span class="string">"/"</span>,<span class="string">"/login"</span>);  <span class="comment">//需要放行的资源</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="3-拦截器原理"><a href="#3-拦截器原理" class="headerlink" title="3.拦截器原理"></a>3.拦截器原理</h2><p>1、根据当前请求，找到<strong>HandlerExecutionChain【</strong>可以处理请求的handler以及handler的所有 拦截器】</p><p>2、先来<strong>顺序执行</strong> 所有拦截器的 preHandle方法</p><ul><li>1、如果当前拦截器prehandler返回为true。则执行下一个拦截器的preHandle</li><li>2、如果当前拦截器返回为false。直接    倒序执行所有已经执行了的拦截器的  afterCompletion；</li></ul><p><strong>3、如果任何一个拦截器返回false。直接跳出不执行目标方法</strong></p><p><strong>4、所有拦截器的prehandler都返回true，才执行目标方法</strong></p><p><strong>5、倒序执行所有拦截器的postHandle方法。</strong></p><p><strong>6、前面的步骤有任何异常都会直接倒序触发</strong> afterCompletion</p><p>7、页面成功渲染完成以后，也会倒序触发 afterCompletion</p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210726223649.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Interceptor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot集成websocket实现聊天室的index.jsp代码</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;script src="${pageContext.request.contextPath}/js/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;SpringBoot+WebSocket+JSP&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style=<span class="string">"margin: 45px;"</span>&gt;</span><br><span class="line">    &lt;h4&gt;在线聊天室&lt;/h4&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">        &lt;label for="content"&gt;&lt;/label&gt;</span><br><span class="line">        &lt;textarea id="content" readonly="readonly" cols="80" rows="15"&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span> style=<span class="string">"margin-top: 8px"</span>&gt;</span><br><span class="line">        &lt;textarea id="message" cols="80" rows="5" placeholder="请输入消息"&gt;&lt;/textarea&gt;</span><br><span class="line">        &lt;div style=<span class="string">"margin-top: 10px"</span>&gt;</span><br><span class="line">            &lt;button id="toSend" class="btn btn-info"&gt;发送&lt;/button&gt;</span><br><span class="line">            &lt;button id="user_exit" class="btn btn-danger"&gt;离开&lt;/button&gt;</span><br><span class="line">            &lt;input id=<span class="string">"username"</span> value=<span class="string">"${username}"</span> style=<span class="string">"display: none"</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $(function () {</span><br><span class="line">            <span class="keyword">var</span> ws;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"WebSocket"</span> in window) {</span><br><span class="line">                <span class="keyword">var</span> baseUrl = <span class="string">'ws://localhost:8080/websocket/'</span>;</span><br><span class="line">                <span class="keyword">var</span> userName = $(<span class="string">'#username'</span>).val();</span><br><span class="line">                ws = <span class="keyword">new</span> WebSocket(baseUrl + userName);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 连通之后的回调事件，建立连接</span></span><br><span class="line">                ws.onopen = function () {</span><br><span class="line">                    console.log(<span class="string">"建立 websocket 连接..."</span>);</span><br><span class="line">                };</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 接收后台服务端的消息</span></span><br><span class="line">                ws.onmessage = function (event) {</span><br><span class="line">                    $(<span class="string">'#content'</span>).append(event.data + <span class="string">'\n\n'</span>);</span><br><span class="line">                    console.log(<span class="string">"接收到服务端发送的消息..."</span> + event.data + <span class="string">'\n'</span>);</span><br><span class="line">                };</span><br><span class="line"></span><br><span class="line">                ws.onerror = function (event) {</span><br><span class="line">                    console.log(<span class="string">"websocket发生错误..."</span> + event + <span class="string">'\n'</span>);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 连接关闭的回调事件</span></span><br><span class="line">                ws.onclose = function () {</span><br><span class="line">                    $(<span class="string">'#content'</span>).append(<span class="string">'['</span> + userName + <span class="string">'] 已离开!'</span>);</span><br><span class="line">                    console.log(<span class="string">"关闭 websocket 连接..."</span>);</span><br><span class="line">                };</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 浏览器不支持 WebSocket</span></span><br><span class="line">                alert(<span class="string">"您的浏览器不支持WebSocket!"</span>);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 客户端发送消息到服务器</span></span><br><span class="line">            $(<span class="string">'#toSend'</span>).click(function () {</span><br><span class="line">                sendMsg();</span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">            $(document).keyup(function (event) {</span><br><span class="line">                <span class="comment">// 回车键事件</span></span><br><span class="line">                <span class="keyword">if</span> (event.keyCode == <span class="number">13</span>) {</span><br><span class="line">                    sendMsg();</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送消息</span></span><br><span class="line">            <span class="function">function <span class="title">sendMsg</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="comment">//websocket发送消息</span></span><br><span class="line">                ws.send($(<span class="string">'#message'</span>).val());</span><br><span class="line">                $(<span class="string">'#message'</span>).val(<span class="string">""</span>);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 退出</span></span><br><span class="line">            $(<span class="string">'#user_exit'</span>).click(function () {</span><br><span class="line">                <span class="keyword">if</span> (ws) {</span><br><span class="line">                    ws.close();</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--此页面的源代码即为index.jsp的代码--%&gt;</span><br><span class="line">&lt;%--点击右键即可查看网页源代码--%&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot集成websocket实现聊天室</title>
      <link href="/posts/3a35.html"/>
      <url>/posts/3a35.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-websocket简介"><a href="#1-websocket简介" class="headerlink" title="1.websocket简介"></a>1.websocket简介</h1><h2 id="WebSocket协议"><a href="#WebSocket协议" class="headerlink" title="WebSocket协议"></a>WebSocket协议</h2><p>WebSocket协议是由HTML5定义的，基于TCP协议实现的一种网络协议，通过该协议服务器可以主动向客户端发送信息；</p><p>WebSocket 协议在2008年诞生，2011年成为W3C国际标准；我们已经有了 HTTP 协议，为什么出现一个websocket协议？</p><p>http协议是短连接，因为请求之后，都会关闭连接，下次重新请求数据，需要再次打开链接；WebSocket协议是一种长连接，只需要通过一次请求来初始化连接，然后所有的请求和响应都是通过这个TCP连接进行通讯； 所以HTTP协议通信只能是客户端向服务器发出请求，服务器返回响应结果，HTTP 协议做不到服务器主动向客户端推送信息，而websocket能实现服务器和客户端全双工通信；</p><ul><li>何谓全双工</li></ul><p>信息只能单向传送为单工；信息能双向传送但不能同时双向传送称为半双工，信息能够同时双向传送则称为全双工；</p><ul><li>基本实现原理</li></ul><p>WebSocket协议基于TCP协议实现，客户端和服务器只需要做一个握手的动作之后，形成了一条基于客户端和服务器之间的快速通道，之后客户端与服务端之间便可以进行多次数据帧双向传输；这样实现的目的是客户端和服务器进行频繁双向通信时，可以使服务器避免频繁创建HTTP连接，节约资源，提高工作效率和资源利用率。</p><h2 id="传统Web推送实现"><a href="#传统Web推送实现" class="headerlink" title="传统Web推送实现"></a>传统Web推送实现</h2><p>​        在没有WebSocket协议之前，服务器如何向浏览器端推送消息？通常的实现方式是在页面通过Ajax定时轮询，比如每隔1秒中向服务器发送一次HTTP请求，询问服务器是否有新消息，服务器返回结果；这种形式缺点很明显，浏览器需要不断的向服务器发出HTTP请求，而HTTP请求包含较长的头部，有效信息相对较少，反复的无效请求占用了大量的带宽和 CPU 资源，造成很大的浪费，所以，WebSocket 应运而生；HTML5定义的WebSocket协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯；</p><p>WebSocket协议本质上是一个基于TCP的协议，因此与HTTP协议没有什么关系；</p><h2 id="WebSocket的特点"><a href="#WebSocket的特点" class="headerlink" title="WebSocket的特点"></a>WebSocket的特点</h2><p>全双工通信，客户端和服务器可以双向平等通信；</p><p>建立在TCP协议之上，服务器端的实现比较容易；</p><p>数据格式比较轻量，性能开销小，通信高效；</p><p>可以发送文本，也可以发送二进制数据；</p><p>通信具有更强的实时性；</p><p>协议标识符是ws，服务器地址就是：ws://<a href="http://www.abc.com/some/path">www.abc.com/some/path</a></p><p>http协议： http://</p><h2 id="websocket的业务场景"><a href="#websocket的业务场景" class="headerlink" title="websocket的业务场景"></a>websocket的业务场景</h2><p>WebSocket聊天室；</p><p>股票实时价格显示等应用；</p><p>即时通讯、游戏、可视化大屏展示等领域；</p><p>企业内部管理通讯等功能，主要通讯协议websocket；</p><p>web网页聊天、客服系统实现；</p><p>系统提醒、用户上下线提醒、客户端同步，实时数据更新，多屏幕同步，用户在线状态，消息通知，扫描二维码登录/二维码支付，弹幕、各类信息提醒，在线选座，实时监控大屏等等；</p><br><h2 id="Java中的WebSocket-API"><a href="#Java中的WebSocket-API" class="headerlink" title="Java中的WebSocket API"></a>Java中的WebSocket API</h2><p>在Java EE 7中Java语言开始支持websocket协议，Java EE 7中定义了一套Websocket API规范，也就是一系列接口，没有实现，位于包javax.websocket下，包含客户端API和服务端API，WebSocket的Java API 只是规范，具体实现需要web容器（比如tomcat就实现了Java websocket api）、Java EE服务器或者框架提供；</p><ul><li><p>在java中服务端的实现</p><p>1、Tomcat：java中的websocket实现，需要tomcat 7.0.47+以上才支持，</p><p>Java EE7的支持；</p><p>2、Spring的websocket，需要Spring 4.x，所以springboot也可以用；</p></li></ul><h1 id="2-Websocket开发相关注解及API方法"><a href="#2-Websocket开发相关注解及API方法" class="headerlink" title="2.Websocket开发相关注解及API方法"></a>2.Websocket开发相关注解及API方法</h1><h2 id="websocket注解"><a href="#websocket注解" class="headerlink" title="websocket注解"></a>websocket注解</h2><ul><li><p>@ServerEndpoint(“/websocket/{uid}”)</p><p>申明这是一个websocket服务；</p><p>需要指定访问该服务的地址，在地址中可以指定参数，需要通过{}进行占位；</p></li><li><p>@OnOpen</p><p>用法：<code>public void onOpen(Session session, @PathParam("uid") String uid) throws IOException{}</code></p><p>该方法将在建立连接后执行，会传入session对象，就是客户端与服务端建立的长连接通道，通过@PathParam获取url中声明的参数；</p></li><li><p>@OnClose</p><p>用法：<code>public void onClose() {}</code></p><p>该方法是在连接关闭后执行；</p></li><li><p>@OnMessage</p><p>用法：<code>public void onMessage(String message, Session session) throws IOException {}</code></p><p>该方法用于接收客户端发送的消息；</p><p>message：发来的消息数据；</p><p>session：会话对象（也是长连接通道）；</p><p>发送消息到客户端；</p><p>用法：<code>session.getBasicRemote().sendText("hello,websocket.");</code></p><p>通过session进行消息发送；</p></li></ul><h2 id="前端技术对websocket的支持"><a href="#前端技术对websocket的支持" class="headerlink" title="前端技术对websocket的支持"></a>前端技术对websocket的支持</h2><p>Websocket是html5规范，主流浏览器都支持；（某些老浏览器不支持）</p><p>jQuery、vueJS、React JS、angularjs等都可以支持webscoket对象；</p><p>底层是javascript支持的一个webscoket的js对象，通过这个对象可以建立websocket的连接：<em>ws://localhost:8080/websocket/12345</em></p><hr><p>WebSocket有很多优点，弥补了http协议的不足，但是如果服务端维护很多长连接也是很耗费资源的，服务器集群带来了复杂性以及存在老版本浏览器兼容性问题，各大厂目前大多数还是基于轮询的方式实现的，比如：扫码登录、支付成功通知、秒杀成功通知等；</p><p>在秒杀场景中，用轮询即可，前端轮询一般不可能穿透到后端数据库查询，一般是采用高性能的缓存标记来判定秒杀是否成功，相对于websocket长连接以及其不确定因素，轮询依然是相对比较合适的方案；</p><p>Websocket各浏览器的支持情况：</p><p><a href="https://caniuse.com/#search=websocket">https://caniuse.com/#search=websocket</a></p><h1 id="3-springboot集成WebSocket实现多人聊天室"><a href="#3-springboot集成WebSocket实现多人聊天室" class="headerlink" title="3.springboot集成WebSocket实现多人聊天室"></a>3.springboot集成WebSocket实现多人聊天室</h1><ul><li><p>项目代码结构分布</p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210725124045.png"></p><ul><li><p>pom文件依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--此项目的GAV坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>041-springboot-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--springboot web项目的起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--spring-boot-starter-websocket--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok,需要在IDEA中安装lombok插件才能使用该依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入Spring Boot内嵌的Tomcat对JSP的解析包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--热部署插件(该依赖不是必选项)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--src/main/java下的.xml配置文件编译到target下去--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--src/main/resources下的配置文件编译到target下去--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--src/main/webapp下的jsp页面编译到META-INF/resources下才能访问--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><ul><li><p>项目的主配置文件application.properties</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#设置jsp文件的前缀和后缀</span><br><span class="line">spring.mvc.view.prefix=/</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></tbody></table></figure></li><li><p>index.jsp文件详情</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo博客不能正常显示jsp格式的代码</span><br><span class="line">代码详情见本站的博文：<span class="string">"springboot集成websocket实现聊天室的index-jsp代码"</span>，</span><br><span class="line">进入该博文页面后，点击右键即可查看index.jsp的源代码</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>还需要一个jquery.min.js文件，可以去网上下载</li></ul></li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210725132514.png"></p><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><ul><li><p>后端代码结构</p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210725133127.png"></p></li><li><p>首先是endpoint包下的chatServerEndpoint.java 文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.endpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 1、<span class="doctag">@ServerEndpoint</span>注解中指定WebSocket协议的地址；</span></span><br><span class="line"><span class="comment"> * 2、<span class="doctag">@OnOpen</span>、<span class="doctag">@OnMessage</span>、<span class="doctag">@OnClose</span>、<span class="doctag">@OnError</span>注解与WebSocket中监听事件对应</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">//lombok jar包，帮我们自动生成一些代码：@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint("/websocket/{username}")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatServerEndpoint</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立时触发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openSession</span><span class="params">(<span class="meta">@PathParam("username")</span> String username, Session session)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"用户{}登录"</span>, username);</span><br><span class="line">        String message = <span class="string">"用户["</span> + username + <span class="string">"] 已进入聊天室！"</span>;</span><br><span class="line">        <span class="comment">// 发送登录消息给其他人</span></span><br><span class="line">        WebSocketUtils.sendMessageAll(message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前在线人数，发给自己</span></span><br><span class="line">        String onlineInfo = WebSocketUtils.getOnlineInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        WebSocketUtils.sendMessage(session, onlineInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加自己到map中</span></span><br><span class="line">        WebSocketUtils.CLIENTS.put(username, session);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端接收服务端数据时触发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(<span class="meta">@PathParam("username")</span> String username, String message)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"发送消息：{}, {}"</span>, username, message);</span><br><span class="line">        <span class="comment">//广播，把消息同步给其他客户端</span></span><br><span class="line">        WebSocketUtils.sendMessageAll(<span class="string">"["</span> + username + <span class="string">"] : "</span> + message);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭时触发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(<span class="meta">@PathParam("username")</span> String username, Session session)</span> </span>{</span><br><span class="line">        <span class="comment">// 当前的Session移除某个用户</span></span><br><span class="line">        WebSocketUtils.CLIENTS.remove(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 离开消息通知所有人</span></span><br><span class="line">        WebSocketUtils.sendMessageAll(<span class="string">"["</span> + username + <span class="string">"] 已离开！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//关闭WebSocket Session会话</span></span><br><span class="line">            session.close();</span><br><span class="line">            log.info(<span class="string">"{} 已退出, onclose"</span>, username);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">"onClose error"</span>, e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通信发生错误时触发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable throwable)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//关闭WebSocket Session会话</span></span><br><span class="line">            session.close();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">"onError Exception"</span>, e);</span><br><span class="line">        }</span><br><span class="line">        log.info(<span class="string">"Throwable msg "</span> + throwable.getMessage());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>endpoint包下的WebSocketUtils.java 文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.endpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.RemoteEndpoint;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WebSocketUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储WebSocket session</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 用户名为key，WebSocket Session对象为value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Session&gt; CLIENTS = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用连接发送数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session 用户session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 发送内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Session session, String message)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">final</span> RemoteEndpoint.Basic basic = session.getBasicRemote();</span><br><span class="line">        <span class="keyword">if</span> (basic == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//发送</span></span><br><span class="line">            basic.sendText(message);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(<span class="string">"sendMessage IOException "</span>, e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息给其他所有人</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessageAll</span><span class="params">(String message)</span> </span>{</span><br><span class="line">        CLIENTS.forEach((sessionId, session) -&gt; sendMessage(session, message));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有在线用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getOnlineInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        Set&lt;String&gt; userNames = CLIENTS.keySet();</span><br><span class="line">        <span class="keyword">if</span> (userNames.size() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"当前无人在线..."</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> CLIENTS.keySet().toString() + <span class="string">"在线"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>接着是controller包下的ChatController.java文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger idProducer = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span> </span>{</span><br><span class="line">        model.addAttribute(<span class="string">"username"</span>,<span class="string">"user"</span> + idProducer.getAndIncrement());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>项目启动后，访问根路径，转发到index.jsp</p></li></ul><ul><li><p>最后是config包下的WebSocketConfig.java文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableWebSocket</span> <span class="comment">//启用WebSocket支持</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//表示配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置ServerEndpointExporter的bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 该Bean会自动注册使用了<span class="doctag">@ServerEndpoint</span>注解声明的Websocket endpoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>最后的最后，是程序的主入口Application.java，用来启动整个项目</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><hr><h2 id="项目启动运行"><a href="#项目启动运行" class="headerlink" title="项目启动运行"></a>项目启动运行</h2><ul><li>在浏览器地址栏输入<code>http://localhost:8080/</code></li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210725134704.png"></p><ul><li><p>示例如下</p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210725135015.png"></p></li><li><p>在另一个浏览器地址栏(或者相同浏览器新建一个窗口)输入<a href="http://localhost:8080/%EF%BC%8C%E5%8D%B3%E5%8F%AF%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9">http://localhost:8080/，即可实现多人聊天</a></p></li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210725135417.png"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot之-MatrixVariable注解使用</title>
      <link href="/posts/80aa.html"/>
      <url>/posts/80aa.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​        根据 URI 规范 RFC 3986 中 URL 的定义，路径片段中可以可以包含键值对。规范中没对对应的术语。一般 “URL 路径参数” 可以被应用，尽管更加独特的 “矩阵 URI” 也经常被使用并且相当有名。在 Spring MVC 它被称为矩阵变量。</p><p>    矩阵变量可以出现在任何路径片段中，每一个矩阵变量都用分号（;）隔开。比如 <code>/cars;color=red;year=2012</code>。多个值可以用逗号隔开，比如<code>color=red,green,blue</code>，或者分开写 <code>color=red;color=green;color=blue</code>。</p><p>    如果你希望一个 URL 包含矩阵变量，那么请求映射模式必须用 URI 模板来表示这些矩阵变量。这样的话，不管矩阵变量顺序如何，都能够保证请求可以正确的匹配。</p><p>Springboot 默认是无法使用矩阵变量绑定参数的。需要覆盖WebMvcConfigurer中的configurePathMatch方法。</p><hr><p>下面用一个springboot项目演示 @MatrixVariable的具体使用方法</p><hr><h1 id="1-前端代码部分"><a href="#1-前端代码部分" class="headerlink" title="1.前端代码部分"></a>1.前端代码部分</h1><ul><li><p>项目的结构分布</p><p> <img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210724221425.png" alt="Snipaste_2021-07-24_21-52-52"></p></li><li><p>前端index.html的代码如下</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>springboot注解之@MatrixVariable<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>springboot注解之@MatrixVariable<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/car/sell;num=10;brand=BYD,AuDi"</span>&gt;</span>@MatrixVariable（矩阵变量）/car/{sell}<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/boss/1;age=20/2;age=30"</span>&gt;</span>@MatrixVariable（矩阵变量）/boss/{bossId}/{empId}<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><p>​    </p><p>1.在<code>/car/sell</code>路径下访问，请求参数为num和brand</p><p>2.在<code>/boss/{bossId}/{empId}</code>路径下访问.请求参数age=20表示<code>/boss/bossId?age=20</code>.</p><p>而请求参数age=30则表示访问路径<code>/boss/bossId/empId?age=30</code></p><h1 id="2-后端代码部分"><a href="#2-后端代码部分" class="headerlink" title="2.后端代码部分"></a>2.后端代码部分</h1><h2 id="2-1-配置类MyConfig-java"><a href="#2-1-配置类MyConfig-java" class="headerlink" title="2.1 配置类MyConfig.java"></a>2.1 配置类MyConfig.java</h2><p>Springboot 默认是无法使用矩阵变量绑定参数的。需要覆盖WebMvcConfigurer中的configurePathMatch方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.PathMatchConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.UrlPathHelper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>{</span><br><span class="line"></span><br><span class="line">        UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-控制器AnnotationController-java"><a href="#2-2-控制器AnnotationController-java" class="headerlink" title="2.2 控制器AnnotationController.java"></a>2.2 控制器AnnotationController.java</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/car/{path}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getCar</span><span class="params">(<span class="meta">@MatrixVariable("num")</span> Integer num,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="meta">@MatrixVariable("brand")</span> List&lt;String&gt; brand,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="meta">@PathVariable("path")</span> String path)</span></span>{</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"num"</span>,num);</span><br><span class="line">        map.put(<span class="string">"brand"</span>,brand);</span><br><span class="line">        map.put(<span class="string">"path"</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/boss/{bossId}/{empId}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getAge</span><span class="params">(<span class="meta">@PathVariable("bossId")</span> Integer bossId,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="meta">@PathVariable("empId")</span> Integer empId,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="meta">@MatrixVariable(value = "age",pathVar = "bossId")</span> Integer bossAge,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="meta">@MatrixVariable(value = "age",pathVar = "empId")</span> Integer empAge)</span></span>{</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"bossId"</span>,bossId);</span><br><span class="line">        map.put(<span class="string">"empId"</span>,empId);</span><br><span class="line">        map.put(<span class="string">"bossAge"</span>,bossAge);</span><br><span class="line">        map.put(<span class="string">"empAge"</span>,empAge);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-主程序入口"><a href="#2-3-主程序入口" class="headerlink" title="2.3 主程序入口"></a>2.3 主程序入口</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAnnotationApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(SpringbootAnnotationApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="3-结果演示"><a href="#3-结果演示" class="headerlink" title="3.结果演示"></a>3.结果演示</h1><ul><li>启动主程序<code>SpringbootAnnotationApplication</code>，在浏览器地址栏输入：<code>http://localhost:8080/</code>,可以得到如下页面</li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210724223130.png" alt="image-20210724223130092"></p><ul><li><p>点击第一个链接，得到如下结果</p><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210724223208.png"></p></li><li><p>点击第二个链接，得到如下结果</p></li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/20210724223237.png" alt="image-20210724223237483"></p>]]></content>
      
      
      <categories>
          
          <category> springboot注解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MatrixVariable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法的使用、博文标题的使用</title>
      <link href="/posts/9892.html"/>
      <url>/posts/9892.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="关于博文的Front-matter的使用"><a href="#关于博文的Front-matter的使用" class="headerlink" title="关于博文的Front-matter的使用"></a>关于博文的Front-matter的使用</h1><ul><li>Front-matter中的内容为非必填项，但建议至少填写title和date</li></ul><p><img src="https://gitee.com/ColorQian/cloudimages/raw/master/img/Snipaste_2021-06-19_15-50-13.png"></p><ul><li>最全示例</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">基于</span> <span class="string">Hexo</span> <span class="string">GitHub</span> <span class="string">从零开始搭建个人博客</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-12-30 09:25:00</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Sitoi</span></span><br><span class="line"><span class="attr">img:</span> <span class="string">/source/images/xxx.jpg</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">cover:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">coverImg:</span> <span class="string">/images/1.jpg</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Hexo</span> <span class="string">GitHub</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Blog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GitHub</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><ul><li>转载自:<a href="https://sitoi.cn/posts/63466.html">https://sitoi.cn/posts/63466.html</a></li></ul><hr><h1 id="markdown-的基本语法"><a href="#markdown-的基本语法" class="headerlink" title="markdown 的基本语法"></a>markdown 的基本语法</h1><h2 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1.斜体和粗体"></a>1.斜体和粗体</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. *斜体*或者_斜体_</span><br><span class="line">2. **粗体**</span><br><span class="line">3. ***加粗斜体***</span><br><span class="line">4. ~~删除线~~</span><br></pre></td></tr></tbody></table></figure><p>显示效果：</p><ol><li><em>斜体</em>或者_斜体_</li><li><strong>粗体</strong></li><li><em><strong>加粗斜体</strong></em></li><li><del>删除线</del></li></ol><h2 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2.分级标题"></a>2.分级标题</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></tbody></table></figure><h2 id="3-超链接"><a href="#3-超链接" class="headerlink" title="3.超链接"></a>3.超链接</h2><ul><li>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。</li></ul><h3 id="3-1-行内式"><a href="#3-1-行内式" class="headerlink" title="3.1 行内式"></a>3.1 行内式</h3><ul><li>介绍：[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">1. 欢迎访问[我的博客](www.colorfo.top)</span><br><span class="line">2. 欢迎访问[我的博客](www.colorfo.top "colorfo")</span><br></pre></td></tr></tbody></table></figure><ol><li>欢迎访问<a href="www.colorfo.top">我的博客</a></li><li>欢迎访问<a href="www.colorfo.top" title="colorfo">我的博客</a></li></ol><h3 id="3-2-参考式"><a href="#3-2-参考式" class="headerlink" title="3.2 参考式"></a>3.2 参考式</h3><p>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p><p>语法说明：<br>参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。</p><p>如果链接文字本身可以做为链接标记，你也可以写成[链接文字][]<br>[链接文字]：链接地址的形式，见代码的最后一行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我经常去的几个网站[Google][1]、[Leanote][2]以及[自己的博客][3]</span><br><span class="line">[Leanote 笔记][2]是一个不错的[网站][]。</span><br><span class="line"></span><br><span class="line">[1]:http://www.google.com "Google"</span><br><span class="line">[2]:http://www.leanote.com "Leanote"</span><br><span class="line">[3]:http://www.colorfo.top "自己的博客"</span><br><span class="line">[网站]:http://http://blog.leanote.com/freewalk</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>显示效果：</p><p>我经常去的几个网站<a href="http://www.google.com/" title="Google">Google</a>、<a href="http://www.leanote.com/" title="Leanote">Leanote</a>以及<a href="http://www.colorfo.top/" title="自己的博客">自己的博客</a><br><a href="http://www.leanote.com/" title="Leanote">Leanote 笔记</a>是一个不错的<a href="http://http//blog.leanote.com/freewalk">网站</a>。</p><ul><li>更多内容请参考—&gt;原文链接：<a href="https://blog.csdn.net/witnessai1/article/details/52551362">https://blog.csdn.net/witnessai1/article/details/52551362</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> front-matter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客的启动和部署</title>
      <link href="/posts/be0d.html"/>
      <url>/posts/be0d.html</url>
      
        <content type="html"><![CDATA[<h1 id="本篇博客主要记录hexo博客的启动和部署"><a href="#本篇博客主要记录hexo博客的启动和部署" class="headerlink" title="本篇博客主要记录hexo博客的启动和部署"></a>本篇博客主要记录hexo博客的启动和部署</h1><h2 id="启动hexo博客"><a href="#启动hexo博客" class="headerlink" title="启动hexo博客"></a>启动hexo博客</h2><ul><li><p>在blog文件夹下，输入cmd,进入Windows的命令提示行窗口</p></li><li><p>输入”hexo server”即可启动 hexo 博客</p></li><li><p>打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000</a>,即可从本地访问hexo博客</p></li></ul><hr><h2 id="添加部署信息"><a href="#添加部署信息" class="headerlink" title="添加部署信息"></a>添加部署信息</h2><ul><li><p>在_config.yml文件中操作(_config.yml文件的最下面修改)，可以将博客部署到github或者gitee</p></li><li><p>例如我的设置为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https://gitee.com/ColorQian/ColorQian.git</span><br><span class="line">branch: master</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改好配置后，运行如下命令，将代码部署到gitee        </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo generate </span><br><span class="line">hexo deploy</span><br></pre></td></tr></tbody></table></figure></li><li><p>在gitee的Gitee Pages 页面更新部署</p></li><li><p>在浏览器地址栏输入：<a href="http://colorqian.gitee.io/">http://colorqian.gitee.io</a> 即可访问博客</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/posts/3d22.html"/>
      <url>/posts/3d22.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>姓名：钱佳乐<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>来自南京理工大学<br>你可以通过邮箱联系我：<a href="mailto:qjl@njust.edu.cn">qjl@njust.edu.cn</a></p><hr><h2 id="关于这个博客网站"><a href="#关于这个博客网站" class="headerlink" title="关于这个博客网站"></a>关于这个博客网站</h2><p>网站名：”<a href="http://colorqian.gitee.io&quot;/">http://colorqian.gitee.io"</a><br>我将会不定期的在这个网站上发布一些关于java的文章</p><hr><h2 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h2><p>程序羊</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
